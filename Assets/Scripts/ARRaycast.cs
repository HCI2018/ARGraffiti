using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.XR.iOS;

namespace ARGraffiti.AR{

public struct ARRaycastHit
{
	public Vector3 position;
	public Quaternion rotation;
	public float distance;

	public ARRaycastHit(Vector3 position, Quaternion rotation, float distance)
	{
		this.position = position;
		this.rotation = rotation;
		this.distance = distance;
	}
}

public static class ARRaycast {
     public static bool HitTestWithResultType
		(ARPoint point, 
	  	 ARHitTestResultType resultTypes,
         float maxRayDistance, LayerMask collisionLayer,
		 out ARRaycastHit hitInfo)
    {
		
        hitInfo = new ARRaycastHit();

        Ray ray = Camera.main.ViewportPointToRay(new Vector3((float)point.x, (float)point.y, 0));
        RaycastHit hit;

        //we'll try to hit one of the plane collider gameobjects that were generated by the plugin
        //effectively similar to calling HitTest with ARHitTestResultType.ARHitTestResultTypeExistingPlaneUsingExtent

        if (Physics.Raycast(ray, out hit, maxRayDistance, collisionLayer))
        {
            //we're going to get the position from the contact point
            Vector3 position = hit.point;
            // Debug.Log(string.Format("x:{0:0.######} y:{1:0.######} z:{2:0.######}", position.x, position.y, position.z));

            //and the rotation from the transform of the plane collider
            Quaternion rotation = hit.transform.rotation;

            hitInfo = new ARRaycastHit(position, rotation, hit.distance);

            return true;
        }



        List<ARHitTestResult> hitResults = UnityARSessionNativeInterface.GetARSessionNativeInterface().HitTest(point, resultTypes);
        
        Debug.Log(hitResults.Count);
        if (hitResults.Count > 0)
        {
            foreach (var hitResult in hitResults)
            {
                //  Debug.Log("Got hit!");
                Vector3 position = UnityARMatrixOps.GetPosition(hitResult.worldTransform);
                Quaternion rotation = UnityARMatrixOps.GetRotation(hitResult.worldTransform);
                //   Debug.Log(string.Format("x:{0:0.######} y:{1:0.######} z:{2:0.######}", position.x, position.y, position.z));
                hitInfo = new ARRaycastHit(position, rotation, (float)hitResult.distance);
            }
        }
        return false;
    }	

}


}
